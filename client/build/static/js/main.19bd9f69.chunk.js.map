{"version":3,"sources":["limsDataProvider.js","ShipSampButton.js","SelectLocationsButton.js","CustomSaveButton.js","SamplesCreate.js","samples.js","projects.js","users.js","freezers.js","BoxChart.js","BoxMap.js","customRoutes.js","Menu.js","MyLayout.js","authProvider.js","App.js","serviceWorker.js","index.js"],"names":["httpClient","fetchUtils","fetchJson","getList","resource","params","console","log","pagination","page","perPage","sort","field","order","query","JSON","stringify","method","range","filter","url","then","headers","data","json","total","parseInt","get","getOne","id_val","id","getMany","ids","getManyReference","target","split","pop","update","body","updateMany","create","createMany","delete","deleteMany","ShipSamplesButton","props","selectedIds","useState","open","setOpen","refresh","useRefresh","notify","useNotify","unselectAll","useUnselectAll","Button","label","onClick","Dialog","onClose","DialogTitle","DialogContent","SimpleForm","save","status","ss_id","dataProvider","catch","e","ReferenceInput","source","reference","SelectInput","optionText","InsertSamplesButton","dups","options","myCustomAttr","sampList","sampleList","slotsNeeded","length","sampsToStore","Math","ceil","useQueryWithStore","type","payload","filled","loading","error","undefined","forEach","datum","slot_size","neededSlots","name","component","disabled","defaultValue","value","validate","required","CustomSaveButton","useDataProvider","redirectTo","useRedirect","basePath","store_samples","store_start","samp_list","aliquots","reduce","acc","cur","concat","Array","fill","storage","store_start1","from","keys","map","s","index","a","samples","floor","batches","col","row","substring","r_c_calc","makeStorage","u_id","p_id","date_cryo","date_exp","alert","handleSave","useCallback","values","storageIds","showNotification","SaveButton","onSave","SamplesCreate","useCreateController","defaultTitle","record","redirect","saving","version","cloneElement","children","SamplesFilter","Filter","SamplesBulkActionButtons","ShipSampButton","BulkDeleteButton","InsertSamplesBulkActionButtons","SamplesCreateToolbar","Toolbar","validateSamplesInsert","errors","SampleCreate","toolbar","NumberInput","FormDataConsumer","formData","rest","TextInput","parse","samps","s_list","DateInput","Resource","list","AvailStoreList","slectedIds","SampleEditToolbar","SampleEdit","Edit","SampleList","List","filters","bulkActionButtons","Datagrid","TextField","ReferenceField","DateField","EditButton","title","ProjectBulkActionButtons","ProjectList","NumberField","ProjectCreate","Create","ProjectEditToolbar","ProjectEdit","UserBulkActionButtons","UserList","UserCreate","PasswordInput","UserEditToolbar","UserEdit","FreezersList","BoxChart","proj_id","xLabels","_","i","yLabels","unique_boxes","push","loc","slice","boxNumbers","self","indexOf","numberOfBoxes","heatMaps","currentBox","currentSamples","d","empty_box","labels","allProject","samp","x","y","sa_name","style","fontSize","xLabelsLocation","xLabelWidth","height","cellStyle","background","min","max","color","cellRender","v","BoxMap","Card","Title","CardContent","exact","path","withRouter","connect","state","resources","getResources","onMenuClick","logout","hasList","MenuItemLink","key","to","primaryText","Responsive","small","medium","MyLayout","Layout","menu","MyMenu","authProvider","login","username","password","request","Request","fetch","response","Error","statusText","token","localStorage","setItem","removeItem","Promise","resolve","checkError","reject","getPermissions","role","getItem","checkAuth","MyLoginPage","Login","backgroundImage","App","Admin","appLayout","customRoutes","loginPage","edit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.19bd9f69.chunk.js","sourcesContent":["import { fetchUtils } from 'react-admin';\r\nimport { stringify } from 'query-string';\r\n\r\nconst apiUrl = '/api';\r\nconst httpClient = fetchUtils.fetchJson;\r\n\r\nexport default {\r\n    getList: (resource, params) => {\r\n          console.log(\"GETLIST CALLED\");\r\n          console.log('getlist params', params);\r\n          const { page, perPage } = params.pagination;\r\n          const { field, order } = params.sort;\r\n          const query = {\r\n              sort: JSON.stringify([field, order]),\r\n              method: 'GET',\r\n              range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\r\n              filter: JSON.stringify(params.filter),\r\n          };\r\n          const url = `${apiUrl}/${resource}?${stringify(query)}`;\r\n          return httpClient(url).then(({ headers, json }) => ({\r\n              data: json,\r\n              total: parseInt(headers.get(\"X-Total-Count\"))\r\n          }));\r\n    },\r\n\r\n    getOne: (resource, params) => {\r\n        console.log(\"GETONE Called\")\r\n        const id_val = [parseInt(params.id)]\r\n        const query = {\r\n            filter: JSON.stringify({id: id_val}),\r\n        };\r\n        // console.log(\"GetOne\", query);\r\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\r\n        // console.log(\"GETONE url\", url);\r\n        return httpClient(url).then(({ json }) => ({ data: json }));\r\n    },\r\n\r\n    getMany: (resource, params) => {\r\n        console.log(\"GETMANY Called\");\r\n        const query = {\r\n            filter: JSON.stringify({id: params.ids}),\r\n        };\r\n        console.log(query);\r\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\r\n        return httpClient(url).then(({ json }) => ({ data: json }));\r\n    },\r\n\r\n    getManyReference: (resource, params) => {\r\n        console.log(\"getMany Reference called\");\r\n        const { page, perPage } = params.pagination;\r\n        const { field, order } = params.sort;\r\n        const query = {\r\n            sort: JSON.stringify([field, order]),\r\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\r\n            filter: JSON.stringify({\r\n                ...params.filter,\r\n                [params.target]: params.id,\r\n            }),\r\n        };\r\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\r\n\r\n        return httpClient(url).then(({ headers, json }) => ({\r\n            data: json,\r\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\r\n        }));\r\n    },\r\n\r\n    update: (resource, params) =>{\r\n        console.log(\"UPDATE called\");\r\n        params.data['ids'] = [params.data.id]\r\n        return httpClient(`${apiUrl}/${resource}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(params.data),\r\n        }).then(({ json }) => ({ data: json }))},\r\n\r\n    updateMany: (resource, params) => {\r\n        console.log(params);\r\n        params.data['ids'] = params.ids;\r\n\r\n        return httpClient(`${apiUrl}/${resource}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(params.data),\r\n        }).then(({ json }) => ({ data: json }));\r\n    },\r\n\r\n    create: (resource, params) =>{\r\n        console.log(\"CREATE called\");\r\n        console.log(params);\r\n        return httpClient(`${apiUrl}/${resource}`, {\r\n              method: 'POST',\r\n              body: JSON.stringify(params.data),\r\n              })\r\n              .then(({ json }) => ({\r\n                  data: { ...params.data, id: json.id },\r\n              }))},\r\n\r\n    createMany: (resource, params) =>{\r\n        console.log(\"CREATE MANY called\");\r\n        console.log(params);\r\n        return httpClient(`${apiUrl}/${resource}`, {\r\n                method: 'POST',\r\n                body: JSON.stringify(params.data),\r\n                //headers: { \"Content-Type\": \"application/json\" }\r\n                }).then(({ json }) => ({\r\n                    data: { ...params.data, id: json.id },\r\n                }))},\r\n\r\n    delete: (resource, params) =>\r\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\r\n            method: 'DELETE',\r\n        }).then(({ json }) => ({ data: json })),\r\n\r\n    deleteMany: (resource, params) => {\r\n        console.log('Delete Many Called');\r\n        const query = {\r\n            filter: JSON.stringify({ id: params.ids}),\r\n        };\r\n        console.log(query);\r\n        return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {\r\n            method: 'DELETE',\r\n            body: JSON.stringify(params.data),\r\n        }).then(({ json }) => ({ data: json }));\r\n    },\r\n};\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\nimport {\r\n    Button,\r\n    Confirm,\r\n    useUpdateMany,\r\n    useRefresh,\r\n    useNotify,\r\n    useUnselectAll,\r\n    SimpleForm,\r\n    NumberInput,\r\n    ReferenceInput,\r\n    SelectInput,\r\n    useDataProvider,\r\n    Loading,\r\n    Error\r\n} from 'react-admin';\r\nimport {Dialog, DialogTitle, DialogContent} from '@material-ui/core';\r\nimport dataProvider from './limsDataProvider'\r\n\r\nconst ShipSamplesButton = (props) => {\r\n    const selectedIds = props.selectedIds;\r\n    const [open, setOpen] = useState(false);\r\n    const refresh = useRefresh();\r\n    const notify = useNotify();\r\n    const unselectAll = useUnselectAll();\r\n\r\n\r\n    // getList('get_avail_store',\r\n    //   {filter: {\"myCustomAttr\": props.dups, \"ids\": props.storageIds},\r\n    //   pagination: {page: 1, perPage: 25},\r\n    //   sort: {field: \"id\", order: \"DESC\"}})\r\n\r\n\r\n    // const [updateMany, { loading }] = useUpdateMany(\r\n    //     'samples',\r\n    //     selectedIds,\r\n    //     { ss_id: status },\r\n    //     {\r\n    //         onSuccess: () => {\r\n    //             refresh();\r\n    //             notify('Samples updated');\r\n    //             unselectAll('samples');\r\n    //         },\r\n    //         onFailure: error => notify('Error: samples not updated', 'warning'),\r\n    //     }\r\n    // );\r\n    const handleClick = () => setOpen(true);\r\n    const handleDialogClose = () => setOpen(false);\r\n\r\n\r\n    const handleConfirm = (props) => {\r\n        console.log(selectedIds);\r\n        const status = props.ss_id;\r\n        dataProvider.\r\n          updateMany('samples',\r\n            { ids: selectedIds, data: {'ss_id': status}})\r\n          .catch((e) => {\r\n            notify('Error: comment not approved', 'warning')\r\n          })\r\n          .then(refresh())\r\n          .then(unselectAll('samples'))\r\n          .then(notify('Samples updated', 'success'));\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment >\r\n            <Button label=\"Ship Samples\" onClick={handleClick} />\r\n            <Dialog {...props} open={open} onClose={handleDialogClose}>\r\n              <DialogTitle>Update Status of Samples</DialogTitle>\r\n              <DialogContent>\r\n                <SimpleForm {...props} save={handleConfirm}>\r\n                  <ReferenceInput source=\"ss_id\" reference=\"s_status\">\r\n                      <SelectInput optionText=\"ss_name\" />\r\n                  </ReferenceInput>\r\n                </SimpleForm>\r\n              </DialogContent>\r\n            </Dialog>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default ShipSamplesButton;\r\n//\r\n// <Confirm\r\n//     isOpen={open}\r\n//     loading={loading}\r\n//     title=\"Ship Samples\"\r\n//     content=\"Are you sure you want to Ship These Samples?\"\r\n//     onConfirm={handleConfirm}\r\n//     onClose={handleDialogClose}\r\n// >\r\n","import React, { Fragment, useState } from 'react';\r\nimport {\r\n    Button,\r\n    Confirm,\r\n    useQueryWithStore,\r\n    Loading,\r\n    Error,\r\n    useUpdateMany,\r\n    useRefresh,\r\n    useNotify,\r\n    useUnselectAll,\r\n    useInput,\r\n    addField,\r\n    TextInput,\r\n    required\r\n} from 'react-admin';\r\nimport { Field } from 'react-final-form';\r\n\r\nconst InsertSamplesButton = props => {\r\n  const dups = props.options.myCustomAttr;\r\n  const sampList = props.options.sampleList;\r\n  console.log('sampList', sampList);\r\n  const slotsNeeded = (sampList.length>1) ? sampList : sampList[0].split(',');\r\n  const sampsToStore = Math.ceil(slotsNeeded.length  / 10) * 10 * dups;\r\n  console.log(sampsToStore);\r\n\r\n  const {data, loading, error} = useQueryWithStore({\r\n    type: 'getList',\r\n    resource: 'get_avail_store',\r\n    payload: {filter: {\"myCustomAttr\": dups, \"ids\": props.selectedIds}, pagination: {page: 1, perPage: 25}, sort: {field: \"id\", order: \"DESC\"}}\r\n  });\r\n\r\n  let filled = 0;\r\n  const selids = props.selectedIds;\r\n  if (selids.length > 0 && data !== undefined){\r\n    data.forEach(datum => filled += datum.slot_size );\r\n  }\r\n\r\n  let neededSlots = sampsToStore - filled;\r\n  if (neededSlots <= 0) {\r\n    neededSlots = 0;\r\n  }\r\n\r\n\r\n    return (\r\n      <Fragment>\r\n        <p>Remaining Samples:{neededSlots}\r\n        </p>\r\n\r\n        <Field\r\n              name=\"storageIds\"\r\n              component=\"input\"\r\n              disabled = {true}\r\n              type=\"array\"\r\n              defaultValue={props.selectedIds}\r\n              value={props.selectedIds}\r\n              validate={required('Must select storage Ids')}\r\n        />\r\n      </Fragment>\r\n    );\r\n}\r\n\r\nexport default InsertSamplesButton;\r\n","import * as React from 'react';\r\nimport { useCallback,  useState, useEffect} from 'react';\r\nimport {\r\n    useRefresh,\r\n    SaveButton,\r\n    Toolbar,\r\n    useCreate,\r\n    useRedirect,\r\n    useNotify,\r\n    useUnselectAll,\r\n    useDataProvider,\r\n    Loading,\r\n    Error,\r\n    showNotification\r\n} from 'react-admin';\r\n// import dataProvider from './limsDataProvider'\r\n\r\nconst CustomSaveButton = props => {\r\n\r\n    const unselectAll = useUnselectAll();\r\n    const dataProvider = useDataProvider();\r\n    const redirectTo = useRedirect();\r\n    // const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState();\r\n    const notify = useNotify();\r\n    const { basePath } = props;\r\n    const refresh = useRefresh();\r\n\r\n    const makeStorage = (store_start,dups) => {\r\n      console.log(store_start);\r\n      //stor_start is an array of record objects returned from the dataProvider\r\n      //copier takes a first_cell element and copies it slot_size times and also add an array of sequential integers\r\n      //to represent filling order\r\n      const copier = (acc, cur) => acc.concat([[Array(cur['slot_size']).fill(cur['first_cell']),Array.from(Array(cur['slot_size']).keys())]]);\r\n      const store_start1 = store_start.reduce(copier,[]);\r\n      console.log(store_start1);\r\n      //tuppler takes separate first_cell and sequenetial integer arrays and combines into a tupple-like structure. It also flattens\r\n      //out the id dimension of the array\r\n      const tuppler = (acc, cur) => acc.concat(cur[0].map((s,index) => [s,cur[1][index]]));\r\n      const store_start2 = store_start1.reduce(tuppler,[]);\r\n\r\n      //r_c_calc detemines row and column values consistent with the sequence order of the cell and\r\n      //updates the first_cell value accordingly\r\n      const r_c_calc = (dups) => {\r\n        //we need to pass an extra parameter to the map function so we return a function taking dups as an argument\r\n        return (a)=>{\r\n          let samples = Math.floor(a[1]/dups);\r\n          let batches= Math.floor(samples/10);\r\n          let col = Math.floor(a[1]/dups)-batches*10;\r\n          //the parseInt term adds the starting row which may not be zero\r\n          let row= a[1]%dups + Math.floor(samples/10)*dups + parseInt(a[0].substring(13,14));\r\n          return a[0].substring(0,13)+row+col;\r\n        }\r\n      }\r\n      return store_start2.map(r_c_calc(dups));\r\n    }\r\n\r\n    const store_samples = (props, store_start) => {\r\n       console.log(props.samp_list);\r\n       console.log('props', props)\r\n\r\n       //build aliquot list from samples using dups\r\n       const samp_list = (props.samp_list.length>1) ? props.samp_list : props.samp_list[0].split(',');\r\n       const aliquots = samp_list.reduce((acc, cur) => acc.concat(Array(props.dups).fill(cur)),[]);\r\n       //bulid storage from start cell and slot size data\r\n       const storage = makeStorage(store_start,props.dups);\r\n       console.log(storage);\r\n       console.log('samp_list',samp_list);\r\n       console.log(' aliquots', aliquots);\r\n\r\n       if (aliquots.length > storage.length){\r\n         alert(\"Did not select enough storage!\");\r\n       }\r\n       else{\r\n         const als = aliquots.map((s,index) => [s, props.u_id, props.ss_id, props.p_id,\r\n                                             props.date_cryo, props.date_exp, storage[index]])\r\n        return als;\r\n      }\r\n     }\r\n\r\n\r\n    const handleSave =\r\n      useCallback((values) => {\r\n      console.log('vals', values);\r\n       dataProvider.getList('get_avail_store',\r\n         {filter: {\"myCustomAttr\": values.dups, \"ids\": values.storageIds},\r\n         pagination: {page: 1, perPage: 25},\r\n         sort: {field: \"id\", order: \"DESC\"}})\r\n         .then((store_start => dataProvider.\r\n           createMany('samples',\r\n           {'fields':['sa_name','u_id','ss_id','p_id', 'cryo_date', 'exp_date', 'loc'],\r\n           'data':store_samples(values, store_start.data)})))\r\n         .then(({ data }) => {\r\n           console.log('usedataProvider', data);\r\n           unselectAll('get_avail_store');\r\n           redirectTo(`/samples?displayedFilters=%7B\"p_id\"%3Atrue%7D&filter=%7B\"p_id\"%3A${values.p_id}%7D`);\r\n        })\r\n        .catch((error) => {\r\n          showNotification('Error: Problems with inserting', 'warning');\r\n        })}, [redirectTo, refresh]);\r\n    return <SaveButton {...props} onSave={handleSave} />;\r\n};\r\n\r\nexport default CustomSaveButton;\r\n","import React, {cloneElement} from 'react';\r\nimport { useCreateController, SimpleForm } from 'react-admin';\r\n\r\nconst SamplesCreate = props => {\r\n    const {\r\n        basePath, // deduced from the location, useful for action buttons\r\n        defaultTitle, // the translated title based on the resource, e.g. 'Create Post'\r\n        record, // empty object, unless some values were passed in the location state to prefill the form\r\n        redirect, // the default redirection route. Defaults to 'edit', unless the resource has no edit view, in which case it's 'list'\r\n        resource, // the resource name, deduced from the location. e.g. 'posts'\r\n        save, // the create callback, to be passed to the underlying form as submit handler\r\n        saving, // boolean that becomes true when the dataProvider is called to create the record\r\n        version, // integer used by the refresh feature\r\n    } = useCreateController(props);\r\n    return (\r\n        <div>\r\n            <h1>{defaultTitle}</h1>\r\n            {cloneElement(props.children, {\r\n                basePath,\r\n                record,\r\n                redirect,\r\n                resource,\r\n                save,\r\n                saving,\r\n                version,\r\n            })}\r\n        </div>\r\n    );\r\n}\r\nexport default SamplesCreate;\r\n","// in src/users.js\r\nimport React, {Fragment} from 'react';\r\nimport { Filter, List, Datagrid, TextField, EmailField, ReferenceField, Resource,\r\n        ReferenceInput, SelectInput, NumberField, DateField, EditButton, Pagination,\r\n        Edit, SimpleForm, TextInput, DateInput, NumberInput, BulkDeleteButton, Create,\r\n        FormDataConsumer, Toolbar, SaveButton, required} from 'react-admin';\r\n// import RichTextInput from 'ra-input-rich-text';\r\nimport ShipSampButton from './ShipSampButton';\r\nimport InsertSamplesButton from './SelectLocationsButton.js';\r\nimport { Field } from 'react-final-form';\r\nimport SaveFunction  from './SaveFunction';\r\nimport CustomSaveButton from './CustomSaveButton';\r\nimport SamplesCreate from './SamplesCreate';\r\n//import InsertManyButton from './InsertMany';\r\n\r\nconst SamplesFilter = (props) => (\r\n    <Filter {...props}>\r\n        <ReferenceInput label=\"Technician\" source=\"u_id\" reference=\"users\">\r\n            <SelectInput optionText=\"last_name\" />\r\n        </ReferenceInput>\r\n        <ReferenceInput label=\"Project\" source=\"p_id\" reference=\"projects\">\r\n            <SelectInput optionText=\"p_name\" />\r\n        </ReferenceInput>\r\n        <ReferenceInput label=\"Status\" source=\"ss_id\" reference=\"s_status\">\r\n            <SelectInput optionText=\"ss_name\" />\r\n        </ReferenceInput>\r\n    </Filter>\r\n);\r\n\r\nconst SamplesBulkActionButtons = props => (\r\n    <Fragment>\r\n        <ShipSampButton label=\"Ship Samples\" {...props} />\r\n        {/* default bulk delete action */}\r\n        <BulkDeleteButton {...props} />\r\n    </Fragment>\r\n);\r\n\r\nconst InsertSamplesBulkActionButtons = props => (\r\n    <Fragment>\r\n        <InsertSamplesButton\r\n            label=\"Choose Samples\" {...props} component=\"input\"/>\r\n    </Fragment>\r\n);\r\n\r\n\r\n\r\nconst SamplesCreateToolbar = (props, {record}) => (\r\n    <Toolbar {...props}>\r\n        <CustomSaveButton {...props} record={record}/>\r\n    </Toolbar>\r\n);\r\n\r\n// Validate Form Entries (contents)\r\nconst validateSamplesInsert = (values) => {\r\n    const errors = {};\r\n    if (values.dups !== parseInt(values.dups, 10)) {\r\n        errors.dups= ['Duplicate Number must be an Integer'];\r\n    }\r\n    return errors\r\n};\r\n\r\n//Simple Form\r\nconst manipulateSampleInput = (stringSamples) => {\r\n    let samps = stringSamples.split(\" \");\r\n    return samps;\r\n}\r\n\r\nconst slotsNeeded = (samps, dups) => {\r\n  let s_list = (samps.length > 1) ? samps : samps[0].split(',');\r\n  return(Math.ceil(s_list.length  / 10) * 10 * dups)\r\n}\r\n\r\nexport const SampleCreate = props => (\r\n      <SamplesCreate {...props}>\r\n         <SimpleForm {...props} validate={validateSamplesInsert} toolbar={< SamplesCreateToolbar {...props} />}>\r\n           <ReferenceInput source=\"u_id\" reference=\"users\" label=\"User\" validate={required('User is Required')}>\r\n             <SelectInput optionText=\"last_name\" />\r\n           </ReferenceInput>\r\n           <ReferenceInput source=\"ss_id\" reference=\"s_status\" label=\"Status\" validate={required('Status is Required')}>\r\n             <SelectInput optionText=\"ss_name\" />\r\n           </ReferenceInput>\r\n           <ReferenceInput source=\"p_id\" reference=\"projects\" label=\"Projects\" validate={required('Project is Required')}>\r\n             <SelectInput optionText=\"p_name\" />\r\n           </ReferenceInput>\r\n           <NumberInput source=\"dups\" label=\"Duplicate (Number of Copies)\" validate={required('Duplicate Number is Required is Required (for no duplicates, write \"1\")')} />\r\n           <FormDataConsumer>\r\n             {({ formData, ...rest }) =>\r\n                <TextInput\r\n                  source=\"samp_list\"\r\n                  label=\"Sample List\"\r\n                  parse={samps => manipulateSampleInput(samps)}\r\n                  validate={required('Sample is Required')}\r\n                  // onChange={samps => neededStorage(samps, formData.dups)}\r\n                  {...rest}\r\n              />}\r\n           </FormDataConsumer>\r\n           <FormDataConsumer>\r\n             {({ formData, ...rest }) =>\r\n                 formData.dups &&\r\n                 formData.samp_list &&\r\n                <Fragment>\r\n                  <p>\r\n                    Slots needed for Storage: {slotsNeeded(formData.samp_list, formData.dups)}\r\n                  </p>\r\n              </Fragment>}\r\n           </FormDataConsumer>\r\n           <DateInput source=\"date_cryo\" validate={required('Cryo Date is Required')} label=\"Cryo Date\" />\r\n           <DateInput source=\"date_exp\" validate={required('Expiration Date is Required')} label=\"Expiration Date\"/>\r\n           <FormDataConsumer>\r\n             {({ formData, ...rest }) =>\r\n              formData.dups &&\r\n              formData.samp_list &&\r\n               <Resource\r\n                source=\"locs\"\r\n                name=\"get_avail_store\"\r\n                list={AvailStoreList}\r\n                options={{ myCustomAttr: formData.dups , sampleList: formData.samp_list, slectedIds: formData.storageIds}}\r\n                {...rest}\r\n             />}\r\n          </FormDataConsumer>\r\n         </SimpleForm>\r\n       </SamplesCreate>\r\n);\r\n\r\nconst SampleEditToolbar = props => (\r\n    <Toolbar {...props} >\r\n        <SaveButton />\r\n    </Toolbar>\r\n);\r\nexport const SampleEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm toolbar={<SampleEditToolbar/>}>\r\n            <TextInput source=\"sa_name\" label= \"Sample Name\" validate={required('Sample Name is Required')} />\r\n            <ReferenceInput source=\"u_id\" reference=\"users\" label= \"User Last Name\">\r\n              <SelectInput optionText=\"last_name\" validate={required('User is Required')} />\r\n            </ReferenceInput>\r\n            <ReferenceInput source=\"ss_id\" reference=\"s_status\" label= \"Status\" >\r\n              <SelectInput optionText=\"ss_name\" validate={required('Status is Required')}/>\r\n            </ReferenceInput>\r\n            <ReferenceInput source=\"p_id\" reference=\"projects\" label=\"Project\" >\r\n              <SelectInput optionText=\"p_name\" validate={required('Project is Required')}/>\r\n            </ReferenceInput>\r\n            <DateInput source=\"date_cryo\" />\r\n            <DateInput source=\"date_exp\" />\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const SampleList = props => (\r\n    <List filters={<SamplesFilter/>} {...props} bulkActionButtons={<SamplesBulkActionButtons />} >\r\n        <Datagrid>\r\n            <TextField source=\"id\" label=\"ID\" />\r\n            <TextField source=\"sa_name\" label=\"Sample\"/>\r\n            <ReferenceField label=\"User\" source=\"u_id\" reference=\"users\">\r\n                <TextField source=\"last_name\" label=\"Technician\" />\r\n            </ReferenceField>\r\n            <ReferenceField label=\"Status\" source=\"ss_id\" reference=\"s_status\">\r\n                <TextField source=\"ss_name\" label=\"Status\" />\r\n            </ReferenceField>\r\n            <ReferenceField label=\"Project\" source=\"p_id\" reference=\"projects\">\r\n                <TextField source=\"p_name\" label=\"Project\" />\r\n            </ReferenceField>\r\n            <TextField source=\"loc\" label=\"Location\" />\r\n            <DateField source=\"date_cryo\" label=\"Cryo Date\" />\r\n            <DateField source=\"date_exp\" label=\"Expiration Date\"/>\r\n            <EditButton/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\n\r\nexport const AvailStoreList = props => (\r\n    <List {...props} bulkActionButtons={<InsertSamplesBulkActionButtons {...props} />} filter={{myCustomAttr: props.options.myCustomAttr, ids: []}}\r\n    title=\"Available Storage\">\r\n        <Datagrid>\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"first_cell\"/>\r\n            <TextField source=\"slot_size\"/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\n","import React, {Fragment} from 'react';\r\nimport { Filter, List, Datagrid, TextField, EmailField, ReferenceField, Resource,\r\n        ReferenceInput, SelectInput, NumberField, DateField, EditButton,\r\n        Edit, SimpleForm, TextInput, DateInput, NumberInput, BulkDeleteButton, Create,\r\n        FormDataConsumer, SaveButton, Toolbar, required} from 'react-admin';\r\n\r\nconst ProjectBulkActionButtons = props => (\r\n    <Fragment/>\r\n);\r\nexport const ProjectList = props => (\r\n    <List {...props} bulkActionButtons={<ProjectBulkActionButtons />}>\r\n        <Datagrid>\r\n            <TextField source=\"id\" label=\"ID\"/>\r\n            <TextField source=\"p_name\" label=\"Project\"/>\r\n            <ReferenceField source=\"u_id\" reference=\"users\" label=\"User\">\r\n                <TextField source=\"last_name\" label=\"Technician\" />\r\n            </ReferenceField>\r\n            <TextField source=\"t_name\" label=\"Target Name\" />\r\n            <TextField source=\"samp_type\" label=\"Sample Type\" />\r\n            <DateField source=\"inv_date\" label=\"Inventory Date\"/>\r\n            <NumberField source=\"sto_terms\" label=\"Storage Terms\" />\r\n            <EditButton/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\nexport const ProjectCreate = props => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n          <TextInput source=\"p_name\" label=\"Project Name\" validate={required('Project Name is Required')}/>\r\n          <ReferenceInput source=\"u_id\" reference=\"users\" label=\"User\" >\r\n            <SelectInput optionText=\"last_name\" validate={required('User is Required')} />\r\n           </ReferenceInput>\r\n          <TextInput source=\"t_name\" label=\"Target Name\" validate={required('Target is Required')}/>\r\n          <TextInput source=\"samp_type\" label=\"Sample Type\" validate={required('Sample Type is Required')}/>\r\n          <DateInput source=\"inv_date\" label=\"Inventory Date\" />\r\n          <NumberInput source=\"sto_terms\" label=\"Storage Terms\" validate={required('Storage Terms Required')} />\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n\r\nconst ProjectEditToolbar = props => (\r\n    <Toolbar {...props} >\r\n        <SaveButton />\r\n    </Toolbar>\r\n);\r\n\r\nexport const ProjectEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm toolbar={<ProjectEditToolbar />} >\r\n          <TextInput source=\"p_name\" label=\"Project Name\"/>\r\n          <ReferenceInput source=\"u_id\" reference=\"users\" label=\"User\">\r\n            <SelectInput optionText=\"last_name\" />\r\n           </ReferenceInput>\r\n          <TextInput source=\"t_name\" label=\"Target Name\"/>\r\n          <TextInput source=\"samp_type\" label=\"Sample Type\"/>\r\n          <DateInput source=\"inv_date\" label=\"Inventory Date\" />\r\n          <NumberInput source=\"sto_terms\" label=\"Storage Terms\" />\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n","import React, {Fragment} from 'react';\r\nimport { Filter, List, Datagrid, TextField, EmailField, ReferenceField, Resource,\r\n        ReferenceInput, SelectInput, NumberField, DateField, EditButton,\r\n        Edit, SimpleForm, TextInput, DateInput, NumberInput, BulkDeleteButton, Create,\r\n        FormDataConsumer, Toolbar, SaveButton, required, PasswordInput } from 'react-admin';\r\n\r\n\r\nconst UserBulkActionButtons = props => (\r\n  <Fragment/>\r\n);\r\nexport const UserList = props => (\r\n    <List {...props} bulkActionButtons={<UserBulkActionButtons />}>\r\n        <Datagrid>\r\n            <TextField source=\"id\" label=\"ID\"/>\r\n            <TextField source=\"first_name\" label=\"First Name\"/>\r\n            <TextField source=\"last_name\" label=\"Last Name\"/>\r\n            <TextField source=\"email\" label=\"Email\"/>\r\n            <TextField source=\"username\" label=\"Username\"/>\r\n            <EditButton/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const UserCreate = props => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n          <TextInput source=\"first_name\" label=\"First Name\" validate={required('First Name is Required')}/>\r\n          <TextInput source=\"last_name\" label=\"Last Name\"  validate={required('Last Name is Required')}/>\r\n          <TextInput source=\"email\" label=\"Email\" validate={required('Email is Required')}/>\r\n          <TextInput source=\"username\" label=\"Username\" validate={required('Username is Required')}/>\r\n          <PasswordInput source=\"password\" label=\"Password\" validate={required('Password is Required')}/>\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n\r\nconst UserEditToolbar = props => (\r\n    <Toolbar {...props} >\r\n        <SaveButton />\r\n    </Toolbar>\r\n);\r\nexport const UserEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm toolbar={<UserEditToolbar />} >\r\n          <TextInput source=\"first_name\" label=\"First Name\" validate={required('First Name is Required')}/>\r\n          <TextInput source=\"last_name\" label=\"Last Name\" validate={required('Last Name is Required')}/>\r\n          <TextInput source=\"email\" label=\"Email\" validate={required('Email is Required')}/>\r\n          <TextInput source=\"username\" label=\"Username\" validate={required('Username is Required')}/>\r\n          <PasswordInput source=\"password\" label=\"Password\" validate={required('Password is Required')}/>\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n","import React, {Fragment} from 'react';\r\nimport { Filter, List, Datagrid, TextField, EmailField, ReferenceField, Resource,\r\n        ReferenceInput, SelectInput, NumberField, DateField, EditButton,\r\n        Edit, SimpleForm, TextInput, DateInput, NumberInput, BulkDeleteButton, Create,\r\n        FormDataConsumer, Toolbar, SaveButton, required, PasswordInput } from 'react-admin';\r\n\r\n\r\nexport const FreezersList = props => (\r\n    <List {...props} bulkActionButtons={false}>\r\n        <Datagrid>\r\n            <TextField source=\"id\" label=\"ID\" />\r\n            <TextField source=\"f_name\" label=\"Storage Unit Name\"/>\r\n            <TextField source=\"temperature\" label=\"Temperature\"/>\r\n            <TextField source=\"status\" label=\"Status\"/>\r\n            <TextField source=\"location\" label=\"Location\"/>\r\n            <TextField source=\"temp_name\" label=\"Temp Name\"/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\n","import React from \"react\";\r\nimport HeatMap from \"react-heatmap-grid\";\r\nimport {\r\n    Button,\r\n    Confirm,\r\n    useQueryWithStore,\r\n    Loading,\r\n    Error,\r\n    useUpdateMany,\r\n    useRefresh,\r\n    useNotify,\r\n    useUnselectAll,\r\n    useInput,\r\n    addField,\r\n    TextInput\r\n} from 'react-admin';\r\n\r\nconst BoxChart = props => {\r\n\r\n  const proj_id = props.options;\r\n  const status = 1;\r\n\r\n\r\n  const {data, loading, error} = useQueryWithStore({\r\n    type: 'getList',\r\n    resource: 'boxsamples',\r\n    payload: {filter: {\"p_id\": proj_id, \"ss_id\": status}, pagination: {page: 1, perPage: 1000}, sort: {field: \"id\", order: \"DESC\"}}\r\n  });\r\n\r\n  // Helper Function to identify unique entries of array\r\n  const onlyUnique = (value, index, self) => {\r\n    return self.indexOf(value) === index;\r\n  }\r\n\r\n  const xLabels = new Array(10).fill(0).map((_, i) => `${i}`);\r\n  const yLabels =  new Array(10).fill(0).map((_, i) => `${i}`);\r\n\r\n  // Find Unique Boxes\r\n  let unique_boxes = [];\r\n  if (data !== undefined){\r\n    data.forEach(datum => unique_boxes.push(datum.loc.slice(0, 12)));\r\n  }\r\n\r\n  let boxNumbers = unique_boxes.filter(onlyUnique);\r\n  console.log('box numbers', boxNumbers);\r\n  const numberOfBoxes = boxNumbers.length;\r\n\r\n  const heatMaps = [];\r\n\r\n  for (let i = 0; i < numberOfBoxes; i++) {\r\n\r\n    // Get samples in the right box\r\n    let currentBox = boxNumbers[i];\r\n    let currentSamples = []\r\n    data.forEach(d => {if (d.loc.slice(0, 12) === currentBox){currentSamples.push(d)}})\r\n\r\n\r\n    // Initialize empty box\r\n    let empty_box = new Array(10);\r\n    for (let i = 0; i < empty_box.length; i++) {\r\n      empty_box[i] = new Array(10).fill(0);\r\n    }\r\n\r\n    // Initialize labels\r\n    let labels = new Array(10);\r\n    for (let i = 0; i < labels.length; i++) {\r\n      labels[i] = new Array(10).fill(\"Empty\");\r\n    }\r\n\r\n    let allProject = 0;\r\n\r\n    // Place data in arrays\r\n    for (const samp of currentSamples){\r\n      let x = samp.loc.slice(-2,-1);\r\n      let y = samp.loc.slice(-1);\r\n\r\n      if (samp.p_id === proj_id){\r\n        allProject += 1;\r\n        empty_box[x][y] = 100;\r\n        labels[x][y] = samp.sa_name;\r\n      }\r\n      else{\r\n        empty_box[x][y] = 50;\r\n        labels[x][y] = \"Other Project\";\r\n      }\r\n    }\r\n\r\n\r\n    console.log('allProject', allProject);\r\n    if (allProject === 100) {\r\n    console.log('In the Check Cases');\r\n    heatMaps.push(\r\n      <div style={{fontSize: \"13px\"}} >\r\n      <h3>Box Number {boxNumbers[i]}</h3>\r\n        <HeatMap\r\n          xLabels={xLabels}\r\n          yLabels={yLabels}\r\n          xLabelsLocation={\"bottom\"}\r\n          xLabelWidth={60}\r\n          data={empty_box}\r\n          height={35}\r\n          cellStyle={(background, value, min, max, data, x, y) => ({\r\n            background: `rgb(0, 151, 230, 1)`,\r\n            fontSize: \"11.5px\",\r\n            color: \"#444\",\r\n          })}\r\n          cellRender={(v,y,x) => `${labels[x][y]}`}\r\n        />\r\n        &nbsp;\r\n      </div>\r\n    )\r\n  }\r\n  else {\r\n        heatMaps.push(\r\n        <div style={{fontSize: \"13px\"}} >\r\n        <h3>Box Number {boxNumbers[i]}</h3>\r\n          <HeatMap\r\n            xLabels={xLabels}\r\n            yLabels={yLabels}\r\n            xLabelsLocation={\"bottom\"}\r\n            xLabelWidth={60}\r\n            data={empty_box}\r\n            height={35}\r\n            cellStyle={(background, value, min, max, data, x, y) => ({\r\n              background:`rgb(0, 151, 230, ${1 - (max - value) / (max - min)})`,\r\n              fontSize: \"11.5px\",\r\n              color: \"#444\",\r\n            })}\r\n            cellRender={(v,y,x) => `${labels[x][y]}`}\r\n          />\r\n          &nbsp;\r\n        </div>\r\n      )\r\n    };\r\n  };\r\n\r\n    return (\r\n      <div>\r\n        {heatMaps}\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default BoxChart;\r\n","import * as React from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Title, SimpleForm, SelectInput, ReferenceInput, FormDataConsumer} from 'react-admin';\r\nimport BoxChart from './BoxChart.js';\r\n\r\nconst BoxMap = (props) => (\r\n    <Card {...props}>\r\n        <Title title=\"Box Charts\" />\r\n        <CardContent {...props}>\r\n          <SimpleForm save={()=> null} {...props}>\r\n          <ReferenceInput source=\"p_id\" reference=\"projects\" label=\"Projects\">\r\n            <SelectInput optionText=\"p_name\" />\r\n          </ReferenceInput>\r\n          <FormDataConsumer>\r\n            {({ formData, ...rest }) =>\r\n                formData.p_id &&\r\n                <BoxChart options= {formData.p_id}/>\r\n            }\r\n            </FormDataConsumer>\r\n          </SimpleForm>\r\n        </CardContent>\r\n    </Card>\r\n);\r\n\r\nexport default BoxMap;\r\n//\r\n","import * as React from \"react\";\r\nimport { Route } from 'react-router-dom';\r\nimport BoxMap from './BoxMap';\r\n\r\nexport default [\r\n    <Route exact path=\"/boxmap\" component={BoxMap} />\r\n];\r\n","// in src/MyMenu.js\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { MenuItemLink, getResources, Responsive } from 'react-admin';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst MyMenu = ({ resources, onMenuClick, logout }) => {\r\n    return(\r\n      <div>\r\n          {resources.map(resource => (\r\n            resource.hasList &&\r\n              <MenuItemLink\r\n                  key={resource.name}\r\n                  to={`/${resource.name}`}\r\n                  primaryText={resource.options && resource.options.label || resource.name}\r\n                  onClick={onMenuClick}\r\n              />\r\n          ))}\r\n          <MenuItemLink to=\"/boxmap\" primaryText=\"box charts\" onClick={onMenuClick} />\r\n          <Responsive\r\n              small={logout}\r\n              medium={null} // Pass null to render nothing on larger devices\r\n          />\r\n      </div>\r\n  );\r\n}\r\nconst mapStateToProps = state => ({\r\n    resources: getResources(state),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps)(MyMenu));\r\n","import React, { createElement } from 'react';\r\nimport { Layout } from 'react-admin';\r\nimport MyMenu from './Menu';\r\n\r\nconst MyLayout = (props) => <Layout {...props} menu={MyMenu} />;\r\n\r\nexport default MyLayout;\r\n","import { fetchUtils } from 'react-admin';\r\nimport { stringify } from 'query-string';\r\n\r\nconst apiUrl = '/api/login/';\r\n\r\nexport const authProvider = {\r\n    login: ({ username, password }) =>  {\r\n        const request = new Request(apiUrl, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ username, password }),\r\n            headers: { \"Content-Type\": \"application/json\" }\r\n        });\r\n        console.log('LOGIN CALLED', request);\r\n        return fetch(request)\r\n            .then(response => {\r\n                console.log(response.status);\r\n                if (response.status < 200 || response.status >= 300) {\r\n                    throw new Error(response.statusText);\r\n                    // console.log(response.statusText);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(({ token }) => {\r\n                localStorage.setItem('token', token);\r\n            });\r\n    },\r\n\r\n    logout: () => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('permissions');\r\n        return Promise.resolve();\r\n    },\r\n\r\n    checkError: (error) => {\r\n      const status = error.status;\r\n      if (status === 401 || status === 403) {\r\n          localStorage.removeItem('token');\r\n          return Promise.reject();\r\n      }\r\n      return Promise.resolve();\r\n    },\r\n\r\n    getPermissions: () => {\r\n        const role = localStorage.getItem('permissions');\r\n        return role ? Promise.resolve(role) : Promise.reject();\r\n    },\r\n\r\n    checkAuth: () => localStorage.getItem('token')\r\n        ? Promise.resolve()\r\n        : Promise.reject(),\r\n};\r\n","import React, { createElement } from 'react';\nimport { Admin, Resource, ListGuesser, EditGuesser, Login } from 'react-admin';\nimport dataProvider from './limsDataProvider';\nimport {SampleList, SampleEdit, SampleCreate} from './samples';\nimport {ProjectList, ProjectCreate, ProjectEdit} from './projects';\nimport {UserList, UserCreate, UserEdit} from './users';\nimport {FreezersList} from './freezers';\nimport customRoutes from './customRoutes';\nimport { Route } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { useMediaQuery } from '@material-ui/core';\nimport { MenuItemLink, getResources } from 'react-admin';\nimport { withRouter } from 'react-router-dom';\nimport LabelIcon from '@material-ui/icons/Label';\nimport MyLayout from './MyLayout';\nimport {authProvider} from \"./authProvider\";\n\nconst MyLoginPage = () => (\n    <Login\n        // A random image that changes everyday\n        backgroundImage='https://www.abveris.com/hs-fs/hubfs/antibody_whitebgrd.png?width=1200&name=antibody_whitebgrd.png'\n    />\n);\n\nconst App = () => (\n      <Admin appLayout={MyLayout} customRoutes={customRoutes} dataProvider={dataProvider} loginPage={MyLoginPage} authProvider={authProvider}  >\n        <Resource name=\"samples\" list={SampleList} edit={SampleEdit} create={SampleCreate}/>\n        <Resource name=\"users\" list={UserList} edit={UserEdit} create={UserCreate} />\n        <Resource name=\"projects\" list={ProjectList} edit={ProjectEdit} create={ProjectCreate} />\n        <Resource name=\"freezers\" list={FreezersList}/>\n        <Resource name=\"s_status\" />\n        <Resource name=\"get_avail_store\" />\n      </Admin>\n  );\n\nexport default App;\n  \n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}